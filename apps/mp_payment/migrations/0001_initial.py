# Generated by Django 2.2.5 on 2019-12-31 13:40

import apps.core.models.domain_ruler_mixin
import apps.core.models.entity_mixin
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(help_text='A friendly name to recognize this account.', max_length=32, verbose_name='name')),
                ('slug', models.SlugField(help_text="This slug is used for this account's notification URL.", max_length=64, unique=True, verbose_name='slug')),
                ('app_id', models.CharField(editable=False, help_text='The APP_ID given by MercadoPago.', max_length=16, verbose_name='client id')),
                ('secret_key', models.CharField(help_text='The SECRET_KEY given by MercadoPago.', max_length=32, verbose_name='secret key')),
                ('sandbox', models.BooleanField(default=True, help_text='Indicates if this account uses the sandbox mode, indicated for testing rather than real transactions.', verbose_name='sandbox')),
                ('active', models.BooleanField(default=True, help_text='Indicates that Account can be used to process process payments.', verbose_name='active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
            ],
            options={
                'verbose_name': 'account',
                'verbose_name_plural': 'accounts',
            },
            bases=(models.Model, apps.core.models.entity_mixin.EntityMixin, apps.core.models.domain_ruler_mixin.DomainRuleMixin),
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(help_text='A name to identify the address.', max_length=32, verbose_name='name')),
                ('slug', models.SlugField(help_text='Unique identification of the address.', max_length=64, verbose_name='slug')),
                ('street_name', models.CharField(max_length=255, verbose_name='street name')),
                ('street_number', models.CharField(blank=True, max_length=32, null=True, verbose_name='street number')),
                ('neighborhood_id', models.CharField(blank=True, max_length=16, null=True, verbose_name='neighborhood ID')),
                ('neighborhood_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='neighborhood name')),
                ('zip_code', models.CharField(blank=True, max_length=32, null=True, verbose_name='zip code')),
                ('city_id', models.CharField(blank=True, max_length=16, null=True, verbose_name='city ID')),
                ('city_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='city name')),
                ('state_id', models.CharField(blank=True, max_length=16, null=True, verbose_name='state ID')),
                ('state_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='state name')),
                ('country_id', models.CharField(blank=True, max_length=16, null=True, verbose_name='country ID')),
                ('country_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='country name')),
                ('phone_area_code', models.CharField(blank=True, help_text='A phone number to contact anyone on this address.', max_length=5, null=True, verbose_name='phone area code')),
                ('phone_number', models.CharField(blank=True, help_text='A phone number to contact anyone on this address.', max_length=32, null=True, verbose_name='phone number')),
                ('comments', models.TextField(blank=True, help_text='Any extra information about this address.', null=True, verbose_name='comments')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
            ],
            options={
                'verbose_name': 'address',
                'verbose_name_plural': 'addresses',
            },
            bases=(models.Model, apps.core.models.entity_mixin.EntityMixin, apps.core.models.domain_ruler_mixin.DomainRuleMixin),
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('token', models.CharField(blank=True, help_text='Required in credit card transactions.', max_length=32, null=True, verbose_name='token')),
                ('expiration_month', models.PositiveIntegerField(verbose_name='expiration month')),
                ('expiration_year', models.PositiveIntegerField(verbose_name='expiration year')),
                ('first_six_digits', models.CharField(max_length=6, verbose_name='first six digits')),
                ('last_four_digits', models.CharField(max_length=4, verbose_name='last four digits')),
                ('holder', models.CharField(help_text='Type the exact name pressed in the card.', max_length=32, verbose_name='holder')),
                ('doc_type', models.CharField(max_length=32, verbose_name='doc. type')),
                ('doc_number', models.CharField(max_length=100, verbose_name='doc. number')),
                ('slug', models.SlugField(help_text='Unique identification of the address.', max_length=64, verbose_name='slug')),
                ('street_name', models.CharField(max_length=255, verbose_name='street name')),
                ('street_number', models.CharField(blank=True, max_length=32, null=True, verbose_name='street number')),
                ('neighborhood_id', models.CharField(blank=True, max_length=16, null=True, verbose_name='neighborhood ID')),
                ('neighborhood_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='neighborhood name')),
                ('zip_code', models.CharField(blank=True, max_length=32, null=True, verbose_name='zip code')),
                ('city_id', models.CharField(blank=True, max_length=16, null=True, verbose_name='city ID')),
                ('city_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='city name')),
                ('state_id', models.CharField(blank=True, max_length=16, null=True, verbose_name='state ID')),
                ('state_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='state name')),
                ('country_id', models.CharField(blank=True, max_length=16, null=True, verbose_name='country ID')),
                ('country_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='country name')),
                ('phone_area_code', models.CharField(blank=True, help_text='A phone number to contact anyone on this address.', max_length=5, null=True, verbose_name='phone area code')),
                ('phone_number', models.CharField(blank=True, help_text='A phone number to contact anyone on this address.', max_length=32, null=True, verbose_name='phone number')),
                ('comments', models.TextField(blank=True, help_text='Any extra information about this address.', null=True, verbose_name='comments')),
                ('mp_id', models.CharField(help_text='The CARD_ID given by MercadoPago.', max_length=16, verbose_name='mercadopago ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
            ],
            options={
                'verbose_name': 'card',
                'verbose_name_plural': 'cards',
            },
            bases=(models.Model, apps.core.models.entity_mixin.EntityMixin, apps.core.models.domain_ruler_mixin.DomainRuleMixin),
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('external_id', models.CharField(help_text='External ID controlled by this application consumer.', max_length=255, verbose_name='external ID')),
                ('first_name', models.CharField(help_text="Customer's first name as to be registered as payer.", max_length=32, verbose_name='first name')),
                ('last_name', models.CharField(help_text="Customer's last name as to be registered as payer.", max_length=32, verbose_name='last name')),
                ('is_company', models.CharField(help_text="Customer's last name as to be registered as payer.", max_length=32, verbose_name='last name')),
                ('email', models.EmailField(max_length=253, verbose_name='E-mail')),
                ('phone_area_code', models.CharField(max_length=5, verbose_name='phone area code')),
                ('phone_number', models.CharField(max_length=32, verbose_name='phone area code')),
                ('doc_type', models.CharField(max_length=32, verbose_name='doc. type')),
                ('doc_number', models.CharField(max_length=100, verbose_name='doc. number')),
                ('description', models.TextField(verbose_name='description')),
                ('default_address_id', models.UUIDField(verbose_name='default address')),
                ('default_card_id', models.UUIDField(verbose_name='default card')),
                ('test_customer', models.BooleanField(blank=True, default=True, help_text='Indicates that this customer is not a real customer.', verbose_name='test customer')),
                ('active', models.BooleanField(default=True, help_text='Indicates that Customer can be used to process process payments.', verbose_name='active')),
                ('mp_id', models.CharField(help_text='The CUSTOMER_ID given by MercadoPago.', max_length=16, verbose_name='mercadopago ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
            ],
            options={
                'verbose_name': 'customer',
                'verbose_name_plural': 'customers',
            },
            bases=(models.Model, apps.core.models.entity_mixin.EntityMixin, apps.core.models.domain_ruler_mixin.DomainRuleMixin),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('status', models.CharField(choices=[('unp', 'Pending'), ('pro', 'Processed'), ('ign', 'Ignored'), ('ok', 'Okay'), ('404', 'Error 404'), ('err', 'Error')], default='unp', max_length=3, verbose_name='status')),
                ('topic', models.CharField(choices=[('o', 'Merchant Order'), ('p', 'Payment')], max_length=1)),
                ('resource_id', models.CharField(max_length=46, verbose_name='resource_id')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('last_update', models.DateTimeField(auto_now=True, verbose_name='last_update')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='notifications', to='mp_payment.Account', verbose_name='owner')),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notification',
            },
            bases=(models.Model, apps.core.models.entity_mixin.EntityMixin, apps.core.models.domain_ruler_mixin.DomainRuleMixin),
        ),
        migrations.CreateModel(
            name='Preference',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('title', models.CharField(max_length=256, verbose_name='title')),
                ('price', models.DecimalField(decimal_places=2, max_digits=15, verbose_name='price')),
                ('quantity', models.PositiveIntegerField(blank=True, default=1, verbose_name='quantity')),
                ('payment_url', models.URLField(verbose_name='payment url')),
                ('sandbox_url', models.URLField(verbose_name='sandbox url')),
                ('reference', models.CharField(max_length=128, unique=True, verbose_name='reference')),
                ('paid', models.BooleanField(default=False, help_text='Indicates if the preference has been paid.', verbose_name='paid')),
                ('mp_id', models.CharField(help_text='The id MercadoPago has assigned for this Preference', max_length=46, verbose_name='mercadopago id')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='preferences', to='mp_payment.Account', verbose_name='owner')),
            ],
            options={
                'verbose_name': 'preference',
                'verbose_name_plural': 'preferences',
            },
            bases=(models.Model, apps.core.models.entity_mixin.EntityMixin, apps.core.models.domain_ruler_mixin.DomainRuleMixin),
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('authorized', 'Authorized'), ('in_processed', 'Processed'), ('in_mediation', 'Mediation'), ('rejected', 'Rejected'), ('cancelled', 'Cancalled'), ('refunded', 'Refunded'), ('charged_back', 'Chargedback')], max_length=16, verbose_name='status')),
                ('status_detail', models.CharField(max_length=32, verbose_name='status detail')),
                ('external_reference', models.CharField(blank=True, help_text='External reference controlled by this application consumer.', max_length=255, null=True, verbose_name='external reference')),
                ('token', models.CharField(blank=True, help_text='Required in credit card transactions.', max_length=32, null=True, verbose_name='token')),
                ('description', models.TextField(null=True, verbose_name='description')),
                ('transaction_type', models.CharField(choices=[('bolbradesco', 'Boleto bradesco'), ('credit_card', 'Credit card')], max_length=255, verbose_name='transaction type')),
                ('transaction_amount', models.DecimalField(decimal_places=10, help_text='Amount processed in provider with all taxes added.', max_digits=25, verbose_name='transaction amount')),
                ('original_amount', models.DecimalField(decimal_places=10, help_text='Amount processed despite interests amount.', max_digits=25, verbose_name='original amount')),
                ('liquid_amount', models.DecimalField(blank=True, decimal_places=10, help_text='Amount to earn with taxes free.', max_digits=25, null=True, verbose_name='liquid amount')),
                ('taxes_amount', models.DecimalField(blank=True, decimal_places=10, help_text='Taxes amount billed by consumer as profit.', max_digits=25, null=True, verbose_name='tax amount')),
                ('provider_amount', models.DecimalField(blank=True, decimal_places=10, help_text='Taxes amount billed by mercado pago.', max_digits=25, null=True, verbose_name='provider amount')),
                ('interests_amount', models.DecimalField(blank=True, decimal_places=10, help_text='When payment using credit card is paid with installment and interests incremented to the main amount.', max_digits=25, null=True, verbose_name='interests amount')),
                ('statement_descriptor', models.CharField(help_text='How it will appear in credit card report to customer.', max_length=11, verbose_name='statement descriptor')),
                ('installments', models.PositiveIntegerField(blank=True, default=1, verbose_name='installments')),
                ('notification_url', models.TextField(help_text='URL where Mercado Pago will send notifications about changes in transaction status.', verbose_name='notification')),
                ('boleto_url', models.TextField(blank=True, null=True, verbose_name='URL do boleto')),
                ('boleto_expiration_date', models.DateField(blank=True, null=True, verbose_name='vencimento do boleto')),
                ('boleto_barcode', models.DateField(blank=True, null=True, verbose_name='vencimento do boleto')),
                ('mp_id', models.CharField(help_text='The PAYMENT_ID given by MercadoPago.', max_length=16, verbose_name='mercadopago ID')),
                ('created', models.DateTimeField(editable=False, verbose_name='created')),
                ('approved', models.DateTimeField(editable=False, null=True, verbose_name='approved')),
                ('address', models.ForeignKey(blank=True, help_text='address used for payment.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='transactions', to='mp_payment.Address', verbose_name='address')),
                ('card', models.ForeignKey(blank=True, help_text='card used for payment.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='transactions', to='mp_payment.Card', verbose_name='card')),
                ('customer', models.ForeignKey(help_text='Payer of the transaction.', on_delete=django.db.models.deletion.PROTECT, related_name='transactions', to='mp_payment.Customer', verbose_name='customer')),
                ('notification', models.OneToOneField(blank=True, help_text='The notification that informed us of this payment.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='customer_transaction', to='mp_payment.Notification', verbose_name='notification')),
                ('preference', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='transactions', to='mp_payment.Preference', verbose_name='preference')),
            ],
            options={
                'verbose_name': 'customer transaction',
                'verbose_name_plural': 'customer transactions',
            },
            bases=(models.Model, apps.core.models.entity_mixin.EntityMixin, apps.core.models.domain_ruler_mixin.DomainRuleMixin),
        ),
        migrations.AddField(
            model_name='notification',
            name='preference',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='notifications', to='mp_payment.Preference', verbose_name='preference'),
        ),
        migrations.AddField(
            model_name='card',
            name='customer',
            field=models.ForeignKey(help_text='customer who owns this address', on_delete=django.db.models.deletion.CASCADE, related_name='cards', to='mp_payment.Customer', verbose_name='owner'),
        ),
        migrations.AddField(
            model_name='address',
            name='customer',
            field=models.ForeignKey(help_text='customer who owns this address', on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to='mp_payment.Customer', verbose_name='owner'),
        ),
        migrations.AlterUniqueTogether(
            name='notification',
            unique_together={('topic', 'resource_id')},
        ),
        migrations.AlterUniqueTogether(
            name='card',
            unique_together={('customer', 'first_six_digits', 'last_four_digits')},
        ),
        migrations.AlterUniqueTogether(
            name='address',
            unique_together={('customer', 'slug')},
        ),
    ]
